// Generated by CoffeeScript 1.3.3
var GameOfLife;

GameOfLife = {};

GameOfLife.Router = Backbone.Router.extend({
  routes: {
    "": "home"
  },
  home: function() {
    var landscape, world;
    world = new GameOfLife.World;
    landscape = new GameOfLife.Landscape({
      model: world
    });
    return landscape.cataclysm();
  }
});

GameOfLife.World = Backbone.Collection.extend({
  model: GameOfLife.Sector,
  initialize: function() {
    this.populateSectors();
    return null;
  },
  populateSectors: function() {
    var x, y;
    x = 1;
    while (x <= 32) {
      y = 1;
      while (y <= 32) {
        this.add(new GameOfLife.Sector({
          world: this,
          x: x,
          y: y
        }), {
          silent: true
        });
        y++;
      }
      x++;
    }
    return null;
  },
  findNeighbors: function(coordinates) {
    var neighbors, x, y;
    x = coordinates.x;
    y = coordinates.y;
    neighbors = this.filter(function(sector) {
      return (sector.get("x") === x - 1 && sector.get("y") === y - 1) || (sector.get("x") === x && sector.get("y") === y - 1) || (sector.get("x") === x + 1 && sector.get("y") === y - 1) || (sector.get("x") === x - 1 && sector.get("y") === y) || (sector.get("x") === x + 1 && sector.get("y") === y) || (sector.get("x") === x - 1 && sector.get("y") === y + 1) || (sector.get("x") === x && sector.get("y") === y + 1) || (sector.get("x") === x + 1 && sector.get("y") === y + 1);
    });
    return _.reject(neighbors, function(neighbor) {
      return neighbor === void 0;
    });
  },
  evolve: function() {
    var model, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
    _ref = this.models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      model = _ref[_i];
      model.determineFate();
    }
    _ref1 = this.models;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      model = _ref1[_j];
      model.evolve();
    }
    _ref2 = this.models;
    _results = [];
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      model = _ref2[_k];
      _results.push(model.trigger("change"));
    }
    return _results;
  }
});

GameOfLife.Landscape = Backbone.View.extend({
  initialize: function() {
    return this.evolutions = 0;
  },
  cataclysm: function() {
    var self;
    this.evolutions += 1;
    $("#evolutions").html("evolution: " + this.evolutions);
    $("#world").html("");
    this.model.evolve();
    null;
    self = this;
    return setTimeout((function() {
      return self.cataclysm();
    }), 10);
  }
});

GameOfLife.Sector = Backbone.Model.extend({
  initialize: function() {
    var state;
    state = new GameOfLife.God().blessedOrCursed();
    this.set({
      alive: state
    });
    return new GameOfLife.SectorLandscape({
      model: this
    });
  },
  myWorld: function() {
    return this.get("world");
  },
  neighbors: function() {
    return this.myWorld().findNeighbors({
      x: this.get("x"),
      y: this.get("y")
    });
  },
  liveNeighbors: function() {
    return _.filter(this.neighbors(), function(neighbor) {
      return neighbor.get("alive") === true;
    });
  },
  determineFate: function() {
    this.set({
      fate: this.willBeAlive()
    }, {
      silent: true
    });
    return null;
  },
  willBeAlive: function() {
    var liveNeighbors;
    liveNeighbors = this.liveNeighbors();
    if (this.get("alive")) {
      if (liveNeighbors.length === 2 || liveNeighbors.length === 3) {
        return true;
      }
      if (liveNeighbors.length < 2) {
        return false;
      }
      if (liveNeighbors.length > 3) {
        return false;
      }
    } else {
      if (liveNeighbors.length === 3) {
        return true;
      }
    }
  },
  evolve: function() {
    return this.set({
      alive: this.get("fate")
    }, {
      silent: true
    });
  }
});

GameOfLife.SectorLandscape = Backbone.View.extend({
  initialize: function() {
    _.bindAll(this, 'render');
    this.model.bind("change", this.render);
    return this.render();
  },
  events: {},
  render: function() {
    var template;
    template = '<span id="{{cid}}" class="sector-landscape {{alive}}"></span>';
    return $("#world").append(Mustache.to_html(template, {
      cid: this.model.cid,
      alive: this.model.get("alive")
    }));
  }
});

GameOfLife.God = (function() {

  function God() {}

  God.prototype.blessedOrCursed = function() {
    if (Math.random() > 0.50) {
      return true;
    }
  };

  return God;

})();
